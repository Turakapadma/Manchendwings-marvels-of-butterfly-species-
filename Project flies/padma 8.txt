
butterfly_images/
  ├─ train/
  ├─ val/
  └─ test/

from tensorflow.keras.preprocessing.image import ImageDataGenerator

IMG_SIZE = (224, 224)
BATCH = 32

train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

val_test_gen = ImageDataGenerator(rescale=1./255)

train_flow = train_gen.flow_from_directory('butterfly_images/train',
                                           target_size=IMG_SIZE,
                                           batch_size=BATCH,
                                           class_mode='sparse')
val_flow = val_test_gen.flow_from_directory('butterfly_images/val',
                                            target_size=IMG_SIZE,
                                            batch_size=BATCH,
                                            class_mode='sparse')
test_flow = val_test_gen.flow_from_directory('butterfly_images/test',
                                             target_size=IMG_SIZE,
                                             batch_size=BATCH,
                                             class_mode='sparse')

from sklearn.model_selection import train_test_split
import pandas as pd

df = pd.read_csv('butterfly_labels.csv')  # columns: path,label
train, temp = train_test_split(df, test_size=0.3, stratify=df['label'], random_state=42)
val, test = train_test_split(temp, test_size=0.5, stratify=temp['label'], random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(*IMG_SIZE, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_flow,
                    validation_data=val_flow,
                    epochs=25)

from tensorflow.keras.applications import ResNet50V2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D

base = ResNet50V2(weights='imagenet', include_top=False, input_shape=(*IMG_SIZE,3))
x = base.output
x = GlobalAveragePooling2D()(x)
x = Dense(256, activation='relu')(x)
x = Dropout(0.4)(x)
preds = Dense(num_classes, activation='softmax')(x)

tl_model = Model(inputs=base.input, outputs=preds)
for layer in base.layers:
    layer.trainable = False  # Freeze base layers

tl_model.compile(optimizer='adam',
                 loss='sparse_categorical_crossentropy',
                 metrics=['accuracy'])

tl_model.fit(train_flow,
             validation_data=val_flow,
             epochs=15)

from transformers import ViTFeatureExtractor, TFViTForImageClassification
from tensorflow.keras.optimizers import Adam
import tensorflow as tf

feature_extractor = ViTFeatureExtractor.from_pretrained('google/vit-base-patch16-224')
model = TFViTForImageClassification.from_pretrained(
    'google/vit-base-patch16-224',
    num_labels=num_classes
)

# Prepare data pipeline with feature_extractor...
# Then fine-tune:
model.compile(optimizer=Adam(1e-4),
              loss=model.compute_loss,
              metrics=['accuracy'])
model.fit(train_dataset, validation_data=val_dataset, epochs=6)

test_loss, test_acc = tl_model.evaluate(test_flow)
print(f"Test accuracy: {test_acc:.2%}")

from sklearn.metrics import classification_report
y_true = test_flow.classes
y_pred = tl_model.predict(test_flow)
print(classification_report(y_true, y_pred.argmax(axis=1),
                            target_names=list(test_flow.class_indices.keys())))
