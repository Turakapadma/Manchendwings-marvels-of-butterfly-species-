data/
  train/
    species1/
    species2/
    …
  val/
    species1/
    …
  test/
    species1/
    …

from tensorflow.keras.preprocessing.image import ImageDataGenerator

IMG_SIZE = (224, 224)
BATCH = 32

train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

val_test_gen = ImageDataGenerator(rescale=1./255)

train_flow = train_gen.flow_from_directory('data/train', target_size=IMG_SIZE, batch_size=BATCH, class_mode='categorical')
val_flow = val_test_gen.flow_from_directory('data/val', target_size=IMG_SIZE, batch_size=BATCH, class_mode='categorical')
test_flow = val_test_gen.flow_from_directory('data/test', target_size=IMG_SIZE, batch_size=BATCH, class_mode='categorical')

from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.optimizers import Adam

num_classes = train_flow.num_classes
base = ResNet50(weights='imagenet', include_top=False, input_shape=(*IMG_SIZE, 3))
x = base.output
x = GlobalAveragePooling2D()(x)
x = Dense(256, activation='relu')(x)
x = Dropout(0.4)(x)
preds = Dense(num_classes, activation='softmax')(x)

model = Model(inputs=base.input, outputs=preds)
for layer in base.layers:
    layer.trainable = False

model.compile(optimizer=Adam(1e-4), loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(train_flow, validation_data=val_flow, epochs=15)

loss, acc = model.evaluate(test_flow)
print(f"Test accuracy: {acc*100:.2f}%")

for layer in base.layers[-10:]:
    layer.trainable = True
model.compile(optimizer=Adam(1e-5), ...)
model.fit(train_flow, validation_data=val_flow, epochs=5)

import numpy as np
from tensorflow.keras.preprocessing import image

img = image.load_img('new_butterfly.jpg', target_size=IMG_SIZE)
x = image.img_to_array(img) / 255.0
x = np.expand_dims(x, axis=0)

preds = model.predict(x)[0]
top = np.argsort(preds)[-3:][::-1]
classes = train_flow.class_indices
inv_map = {v: k for k, v in classes.items()}
for idx in top:
    print(inv_map[idx], preds[idx])
